@if (WebSecurity.IsAuthenticated)
{
    Response.Redirect("Manage");
}
@section navbar{

}
@{
    Layout = "~/Shared/_Layout.cshtml";
    Page.Title = "Wachtwoord resetten";
    App.LoginShow = false;
    var passwordResetToken = Request.Form["passwordResetToken"] ?? Request.QueryString["resetToken"];
    bool tokenExpired = false;
    bool isSuccess = false;
    //validator wachtwoord
    Validation.RequireField("newPassword", "Nieuw wachtwoord is vereist!");
    Validation.Add("confirmPassword", Validator.EqualsTo("newPassword", "Het nieuwe wachtwoord komt niet overeen met de bevestiging."));
    Validation.RequireField("passwordResetToken", "resettokenveld mag niet leeg zijn!");
    Validation.Add("newPassword", Validator.StringLength(maxLength: Int32.MaxValue, minLength: 8, errorMessage: "Nieuwe wachtwoord moet minimaal 8 tekens zijn!"));
    if (IsPost)
    {
        try
        {
            Gebruiker g = Gebruiker.GetUser(passwordResetToken);            
            Validation.Add("newPassword", MyValidator.Regex(@"[A-Z]+", "Wachtwoord moet minstens 1 hoofdletter bevatten."),
            MyValidator.Regex(@"[a-z]", "Wachtwoord moet minimaal 1 kleine leter bevatten."),
            MyValidator.Regex(@"[0-9]", "Wachtwoord moet minimaal 1 cijfer bevatten."),
            MyValidator.Regex(@"[+-.,!@#$%^&*]", "Wachtwoord moet minimaal 1 speciaal teken bevatten"),
            MyValidator.Password(g.Naam, g.Achternaam, g.Email, "Wachtwoord mag geen naam of deel van email bevatten."));
            if (Validation.IsValid())
            {
                var newPassword = Request["newPassword"];
                var confirmPassword = Request["confirmPassword"];

                if (WebSecurity.ResetPassword(passwordResetToken, newPassword))
                {
                    isSuccess = true;
                }
                else
                {
                    ModelState.AddError("passwordResetToken", "De resettoken is ongeldig!");
                    tokenExpired = true;
                }
            }
        }
        catch
        {
            isSuccess = false;
            ModelState.AddError("passwordResetToken", "De resettoken is ongeldig!");
        }

    }
}
<div class="row">
    <div class="col-lg-2"></div>
    <!--melding-->
    <div class="col-lg-8">
        @if (IsPost && (!Validation.IsValid() || !isSuccess))
        {
            if (tokenExpired)
            {
                <div class="alert alert-danger" role="alert"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>Je wachtwoord resettoken is ongeldig of verlopen. ga naar <a href="~/Account/ForgotPassword">wachtwoord vergeten</a> pagina om een nieuwe token te genereren.</div>
            }
            else
            {
                <div class="alert alert-danger" role="alert"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>Kon het wachtwoord niet resetten. Verbeter de fouten en probeer het opnieuw.</div>
            }
        }
        else if (IsPost && isSuccess)
        {
            <div class="alert alert-success" role="alert"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>Wachtwoord is veranderd! Klik <a href="~" title="Log in">hier</a> om in te loggen.</div>
        }
    </div>
    <!--Einde melding-->
    <div class="col-lg-2"></div>
</div>
<div class="row">
    <div class="col-lg-2"></div>
    <div class="col-lg-8">
        <!--Pagina-->
        <div class="panel panel-default">

            <div class="panel-heading"><div class="panel-title">Wachtwoord resetten</div></div>
            <form method="post">
                <div class="panel-body">

                    <table>
                        <tr class="new-password">
                            <td><label for="newPassword" @if (!ModelState.IsValidField("newPassword")) { <text> class="error-label" </text>    }>Nieuwe wachtwoord:</label></td>
                            <td><input type="password" id="newPassword" name="newPassword" disabled="@isSuccess" @Validation.For("newPassword") placeholder="Kies een sterk wachtwoord!" /></td>
                            <td>@Html.ValidationMessage("newPassword")</td>
                        </tr>
                        <tr class="confirm-password">
                            <td><label for="confirmPassword" @if (!ModelState.IsValidField("confirmPassword")) { <text> class="error-label" </text>    }>Bevestig wachtwoord:</label> </td>
                            <td><input type="password" id="confirmPassword" name="confirmPassword" disabled="@isSuccess" @Validation.For("confirmPassword") placeholder="Herhaal wachtwoord" /></td>
                            <td>@Html.ValidationMessage("confirmPassword")</td>
                        </tr>
                        <tr class="reset-token">
                            <td><label for="resetToken" @if (!ModelState.IsValidField("passwordResetToken"))
                                                        { <text> class="error-label" </text>    }>Wachtwoord resettoken:</label> </td>
                            <td><input type="text" id="resetToken" name="passwordResetToken" value="@passwordResetToken" disabled="@isSuccess" @Validation.For("passwordResetToken") placeholder="token" /></td>
                            <td>@Html.ValidationMessage("passwordResetToken")</td>
                        </tr>
                    </table>


                </div>
                <div class="panel-footer">
                    <div class="pull-right">
                        <input type="submit" class="btn btn-primary" value="Wachtwoord resetten" disabled="@isSuccess" />
                    </div>
                    <div class="clearfix"></div>
                </div>
            </form>
        </div>
        <!--einde pagina-->
    </div>
    <div class="col-lg-2"></div>
</div>


